{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.API_URI = environment.dirBackend;\n      this.user = new BehaviorSubject(null);\n    }\n\n    signIn(cedula, password) {\n      return this.http.post(`${this.API_URI}/auth/signin`, {\n        cedula: cedula,\n        password: password\n      }).pipe(tap(resData => {\n        const expirationDate = new Date(new Date().getTime() + +resData.expiresIn * 1000);\n        const user = new User(resData.cedula, resData.token, expirationDate, resData.roles);\n        this.user.next(user);\n        this.autoLogout(+resData.expiresIn * 1000);\n        localStorage.setItem('userData', JSON.stringify(user));\n        this.router.navigate(['/menu']);\n      }));\n    }\n\n    signUp() {}\n\n    logout() {\n      this.user.next(null);\n      this.router.navigate(['/login']);\n      localStorage.removeItem('userData');\n\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n\n      this.tokenExpirationTimer = null;\n    }\n\n    autoLogout(expirationDuration) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logout();\n      }, expirationDuration);\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new User(userData.cedula, userData._token, new Date(userData._tokenExpirationDate), userData.roles);\n\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n        const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expirationDuration);\n      }\n    }\n\n    changePassword(cedula, newPass) {\n      return this.http.put(`${this.API_URI}/auth/changePassword`, {\n        cedula: cedula,\n        password: newPass\n      });\n    }\n\n    hasPermission(roles) {\n      console.log(this.user.value.roles);\n      let hasPermission = false;\n      roles.forEach(rol => {\n        if (this.user.value.roles.includes(rol)) {\n          console.log('dentro', rol);\n          return hasPermission = true;\n        }\n      });\n      return hasPermission;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}